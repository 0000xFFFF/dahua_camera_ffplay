#!/usr/bin/env python
import subprocess
import time
import re

import argparse

parser = argparse.ArgumentParser(description="dahua camera motion detection")
parser.add_argument("-i", "--ip", required=True, metavar="<ip>", type=str, help="ip to connect to")
parser.add_argument("-u", "--username", required=True, metavar="<user>", type=str, help="account username")
parser.add_argument("-p", "--password", required=True, metavar="<pass>", type=str, help="account password")
parser.add_argument("-c", "--channel", default=1, metavar="<ch>", type=str, help="account password")
parser.add_argument("-s", "--subtype", default=0, metavar="<ch>", type=str, help="account password")
parser.add_argument("-a", "--area", default=10, metavar="<area>", type=int, help="contour area for detection (drawing rectangle)")
parser.add_argument("-ww", "--width", default=1920, metavar="<px>", type=int, help="window pixels width")
parser.add_argument("-wh", "--height", default=1080, metavar="<px>", type=int, help="window pixels height")
parser.add_argument("-fs", "--fullscreen", action="store_true", help="start window in fullscreen mode")
parser.add_argument("-d", "--detect", action="store_true", help="detect screen size with xrandr and set width & height")
parser.add_argument("-r", "--resolution", default=0, metavar="<index>", type=int, help="index of resolution to use (default: 0)")
args = parser.parse_args()

if args.detect:
    output = subprocess.run("xrandr | grep '*' | awk '{print $1}'", shell=True, capture_output=True, text=True)
    resolutions = output.stdout.strip().split("\n")
    print(f"detected resolutions: {resolutions}")
    resolution = resolutions[args.resolution].split("x")
    print(f"using resolution: {resolution}")
    args.width, args.height = int(resolution[0]), int(resolution[1])

def start_ffplay():
    """Start ffplay and return the process object."""
    command = [ "ffplay"]

    if args.fullscreen:
        command += [ "-fs" ]

    command += [
        "-hide_banner",
        "-loglevel",
        "verbose",
        "-rtsp_transport",
        "tcp",
        "-vf",
        f"scale={args.width}:{args.height}",
        f"rtsp://{args.username}:{args.password}@{args.ip}:554/cam/realmonitor?channel={args.channel}&subtype={args.subtype}",
    ]
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    )
    return process


def monitor_ffplay():
    """Monitor ffplay output and check for conditions."""
    buffer = []
    buffer_max_size = 200  # Keep last 200 lines in memory
    empty_queue_threshold = 100  # Number of "vq= * 0KB" lines to trigger a restart

    while True:
        print("Starting ffplay...")
        buffer.clear()
        process = start_ffplay()
        time.sleep(3)  # Wait for ffplay to initialize

        while True:
            # Check if ffplay is still running
            if process.poll() is not None:
                print("ffplay is not running...")
                break

            # Read output from ffplay
            output = process.stdout.readline().strip()
            if output:
                print(output)  # Print output for debugging
                buffer.append(output)
                if len(buffer) > buffer_max_size:
                    buffer.pop(0)  # Remove the oldest line to keep buffer size fixed

            # Check if video queue is empty for too long
            empty_queue_count = sum(
                1 for line in buffer if re.search(r"vq=\s*0KB", line)
            )
            if empty_queue_count > empty_queue_threshold:
                print("Video queue is empty for too long.")
                process.terminate()
                process.wait()
                break


if __name__ == "__main__":
    monitor_ffplay()
