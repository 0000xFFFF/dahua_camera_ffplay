#!/bin/bash
IP="$1"
USER="$2"
PASS="$3"

# Define RTSP URLs
URL1="rtsp://$USER:$PASS@$IP:554/cam/realmonitor?channel=1&subtype=0"
URL2="rtsp://$USER:$PASS@$IP:554/cam/realmonitor?channel=2&subtype=0"
URL3="rtsp://$USER:$PASS@$IP:554/cam/realmonitor?channel=3&subtype=0"
URL4="rtsp://$USER:$PASS@$IP:554/cam/realmonitor?channel=4&subtype=0"

# Function to launch ffplay instance and monitor it
launch_ffplay() {
    local url=$1
    while true; do
        ffplay -hide_banner -loglevel quiet -rtsp_transport tcp -i "$url" &
        pid=$!
        wait $pid  # Wait for the process to exit
        echo "ffplay for $url crashed, restarting..."
        sleep 1  # Short delay before restart
    done
}

# Launch both instances in background
launch_ffplay "$URL1" &
launch_ffplay "$URL2" &
launch_ffplay "$URL3" &
launch_ffplay "$URL4" &

# Function to count ffplay windows
count_ffplay_windows() {
    i3-msg -t get_tree | jq '.. | objects | select(.window_properties.class? == "ffplay")' | wc -l
}

# Wait for all four ffplay windows to appear
while [ $(count_ffplay_windows) -lt 4 ]; do
    sleep 1  # Adjust delay if needed
done

# Apply 2x2 grid layout in i3
i3-msg "workspace current; split h"
sleep 0.1
i3-msg "focus left; split v"
sleep 0.1
i3-msg "focus right; split v"

# Wait for all background jobs
wait


# ffmpeg -i "rtsp://$USER:$PASS@$IP:554/cam/realmonitor?channel=1&subtype=0" \
#        -i "rtsp://$USER:$PASS@$IP:554/cam/realmonitor?channel=2&subtype=0" \
#        -filter_complex "[0:v][1:v]vstack=inputs=2[v]" -map "[v]" -f matroska - | ffplay -fs -

